
HttpURLConnection — это встроенный класс Java, который предоставляет
функции для выполнения HTTP-запросов. Он позволяет отправлять запросы различных
типов (GET, POST и др.) и обрабатывать ответы от сервера. Это стандартный способ
работы с сетью в Java, который не требует установки дополнительных библиотек.

OkHttp — это мощная библиотека для работы с HTTP, разработанная компанией Square.
Она предлагает удобный интерфейс для выполнения HTTP-запросов и поддерживает асинхронные вызовы,
автоматическое кэширование, сжатие ответов, а также работу с WebSocket и HTTP/2. OkHttp является
более современным и эффективным решением по сравнению с HttpURLConnection.

Retrofit — это библиотека, также разработанная Square, которая построена на базе OkHttp.
Она предназначена для упрощения работы с RESTful API, используя аннотации для определения
интерфейсов и автоматически преобразуя JSON-ответы в объекты Java. Retrofit поддерживает как
асинхронные, так и синхронные запросы и легко интегрируется с библиотеками для реактивного
программирования, такими как RxJava.

Различия между HttpURLConnection, OkHttp и Retrofit заключаются в нескольких ключевых аспектах.
Во-первых, по сложности использования, HttpURLConnection является более сложным в применении,
так как требует ручной обработки потоков и ответов, что приводит к большему объему кода для выполнения
даже простых задач. В то время как OkHttp предлагает более удобный интерфейс, значительно упрощая
выполнение запросов, а Retrofit еще больше облегчает работу с API, позволяя использовать аннотации
и автоматически обрабатывая ответы, что сокращает объем кода до минимума.

Во-вторых, в отношении асинхронности, HttpURLConnection не поддерживает асинхронные запросы ,
 что может привести к блокировке основного потока приложения. Напротив, OkHttp
полностью поддерживает асинхронные вызовы, что позволяет избежать этой проблемы, а Retrofit
также поддерживает асинхронные запросы и может интегрироваться с библиотеками для реактивного
программирования, такими как RxJava, для создания более отзывчивых приложений.

Третьим важным аспектом является обработка данных. HttpURLConnection не предоставляет встроенных
средств для обработки форматов данных, таких как JSON, что требует дополнительной работы с парсингом.
OkHttp позволяет обрабатывать данные, но не предлагает автоматического преобразования JSON в объекты
Java, в то время как Retrofit автоматически преобразует JSON-ответы в объекты Java, что значительно
упрощает работу с данными.

Наконец, в поддержке современных технологий, HttpURLConnection не поддерживает такие современные
протоколы, как HTTP/2 и WebSocket. В отличие от него, OkHttp поддерживает эти технологии, что делает
его более подходящим для современных приложений, а Retrofit, будучи построенным на базе OkHttp, также
использует эти возможности, упрощая работу с API и обеспечивая поддержку современных стандартов.
Таким образом, выбор подхода зависит от специфики проекта и требований к функциональности.

1. HttpURLConnection
Этапы:
Создать URL: Определите URL-адрес API погоды (например, https://api.weather.com/v3/weather/...).
Открыть соединение: Используйте HttpURLConnection для открытия соединения с указанным URL.
Настроить запрос: Установите метод запроса (GET) и добавьте необходимые заголовки (например, API ключ).
Отправить запрос: Вызовите connect() для отправки запроса.
Получить ответ: Проверьте код ответа и используйте InputStream для чтения данных ответа.
Обработать данные: Преобразуйте полученные данные (обычно в формате JSON) в нужный формат
    (например, с помощью JSONObject или Gson).
Закрыть соединение: Закройте InputStream и соединение после завершения работы.

2. OkHttp
Этапы:
Создать OkHttpClient: Инициализируйте экземпляр OkHttpClient.
Создать запрос: Используйте Request.Builder для создания GET-запроса с нужным URL и заголовками
    (например, API ключ).
Отправить запрос: Вызовите client.newCall(request).enqueue() для асинхронного выполнения запроса.
Обработать ответ: В обработчике ответа проверьте код ответа и получите тело ответа с помощью
    response.body().string().
Обработать данные: Преобразуйте JSON-ответ в объекты Java (например, с помощью Gson).
Обработать ошибки: Обработайте возможные ошибки (например, сетевые ошибки) в методе обратного вызова.

3. Retrofit
Этапы:
Создать интерфейс API: Определите интерфейс с аннотацией @GET для метода, который будет получать данные
    о погоде (например, @GET("weather")).
Создать экземпляр Retrofit: Инициализируйте Retrofit с базовым URL и конвертером (например, GsonConverterFactory).
Создать реализацию API: Используйте retrofit.create(YourApiInterface.class) для получения реализации интерфейса.
Отправить запрос: Вызовите метод интерфейса (например, api.getWeather()) для выполнения запроса.
Обработать ответ: Используйте enqueue() для асинхронного выполнения и обработки ответа в методах
    обратного вызова onResponse() и onFailure().
Обработать данные: JSON-ответ автоматически преобразуется в объекты Java, которые вы можете
    использовать в приложении.
Эти этапы дают общее представление о том, как работать с сетью в Android для получения данных
    о погоде с использованием различных подходов. Выбор метода зависит от требований вашего проекта
    и предпочтений в разработке.